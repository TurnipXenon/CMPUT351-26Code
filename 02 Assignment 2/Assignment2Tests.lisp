(set 't1 '(fl-interp '(+ 10 5) nil)) ; > '15
(set 't2 '(fl-interp '(- 12 8) nil)) ; > '4
(set 't3 '(fl-interp '(* 5 9) nil))
(set 't4 '(fl-interp '(> 2 3) nil))
(set 't5 '(fl-interp '(< 1 131) nil))
(set 't6 '(fl-interp '(= 88 88) nil))
(set 't7 '(fl-interp '(and false true) nil))
(set 't8 '(fl-interp '(or true false) nil))
(set 't9 '(fl-interp '(not true) nil))
(set 't10 '(fl-interp '(number 354) nil))
(set 't11 '(fl-interp '(equal (3 4 1) (3 4 1)) nil))
(set 't12 '(fl-interp '(if false 2 3) nil))
(set 't13 '(fl-interp '(null ()) nil))
(set 't14 '(fl-interp '(atom (3)) nil))
(set 't15 '(fl-interp '(eq x x) nil))
(set 't16 '(fl-interp '(first (8 5 16)) nil))
(set 't17 '(fl-interp '(rest (8 5 16)) nil))
(set 't18 '(fl-interp '(cons 6 3) nil))
(set 't19 '(fl-interp '(+ (* 2 2) (* 2 (- (+ 2 (+ 1 (- 7 4))) 2))) nil))
(set 't20 '(fl-interp '(and (> (+ 3 2) (- 4 2)) (or (< 3 (* 2 2))) (not (= 3 2))) nil))
(set 't21 '(fl-interp '(or (= 5 (- 4 2)) (and (not (> 2 2)) (< 3 2))) nil))
(set 't22 '(fl-interp '(if (not (null (first (a c e)))) (if (number (first (a c e))) (first (a c e)) (cons (a c e) d)) (rest (a c e))) nil))

(eval t1)